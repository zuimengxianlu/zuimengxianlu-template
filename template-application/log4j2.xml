<configuration status="WARN">
    <Properties>
        <!-- 日志最大的历史 -->
        <property name="MAX_HISTORY" value="30"/>
        <!-- 组件名称 -->
        <property name="MODULE_NAME" value="service"/>
        <!-- 日志文件目录 -->
        <property name="DIR" value="logs"/>
        <!-- 日志文件备份目录 -->
        <property name="BACK_UP_DIR" value="backup"/>
        <!-- 日志文件大小上限 -->
        <property name="MAX_FILE_SIZE" value="100MB"/>
    </Properties>
    <!-- 开启JMX管理日志,Log4j2内置JMX -->
    <!--<jmxConfigurator />-->
    <!-- 输出到控制台 -->
    <Appenders>
        <Console name="STDOUT" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout disableAnsi="false" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} %style{[%t]}{bright,cyan} %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Blue, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} [%c{1.}] - %msg%n"/>
        </Console>

        <WebConsoleAppender name="WebConsoleAppender">
            <PatternLayout disableAnsi="false" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} %style{[%t]}{bright,cyan} %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Blue, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} [%c{1.}] - %msg%n"/>
        </WebConsoleAppender>
        <!-- error级别单独记录 -->
        <!--filePattern表示出发rollover，生成新的日志文件时，旧的日志文件改名的格式-->
        <RollingFile name="errorAppender" fileName="${DIR}/${MODULE_NAME}-error.log"
                     filePattern="${DIR}/${BACK_UP_DIR}/error/${MODULE_NAME}-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>"%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} %style{[%t]}{bright,cyan} %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Blue, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} [%c{1.}] - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <!-- 以day为单位自动回滚 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达100M时-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${DIR}" maxDepth="3">
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="${MAX_HISTORY}d" />
                </Delete>
            </DefaultRolloverStrategy>
            <!--添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝  -->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>

        <!-- warn级别单独记录 -->
        <!--filePattern表示出发rollover，生成新的日志文件时，旧的日志文件改名的格式-->
        <RollingFile name="warnAppender" fileName="${DIR}/${MODULE_NAME}-warn.log"
                     filePattern="${DIR}/${BACK_UP_DIR}/warn/${MODULE_NAME}-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>"%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} %style{[%t]}{bright,cyan} %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Blue, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} [%c{1.}] - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <!-- 以day为单位自动回滚 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达100M时-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${DIR}" maxDepth="3">
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="${MAX_HISTORY}d" />
                </Delete>
            </DefaultRolloverStrategy>
            <!--添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝  -->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>

        <!--info级别单独记录-->
        <RollingFile name="infoAppender" fileName="${DIR}/${MODULE_NAME}-info.log"
                     filePattern="${DIR}/${BACK_UP_DIR}/info/${MODULE_NAME}-%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <Pattern>"%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} %style{[%t]}{bright,cyan} %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Blue, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} [%c{1.}] - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <!-- 以day为单位自动回滚 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达100M时-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${DIR}" maxDepth="3">
                    <IfFileName glob="*.log.gz" />
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="${MAX_HISTORY}d" />
                </Delete>
            </DefaultRolloverStrategy>
            <!--添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝  -->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
        </RollingFile>

        <RollingFile name="JsonFile" fileName="${DIR}/${MODULE_NAME}-json.log"
                     filePattern="${DIR}/${BACK_UP_DIR}/json/${MODULE_NAME}-%d{yyyy-MM-dd}.%i.log.gz">
            <Policies>
                <!-- 以day为单位自动回滚 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--当文件大小到达100M时-->
                <SizeBasedTriggeringPolicy size="${MAX_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${DIR}" maxDepth="3">
                    <IfFileName glob="*.log.gz"/>
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="${MAX_HISTORY}d"/>
                </Delete>
            </DefaultRolloverStrategy>
            <JsonLayout compact="true" locationInfo="false" complete="false" eventEol="true">
                <KeyValuePair key="app_name" value="${MODULE_NAME}"/>
                <KeyValuePair key="message_time" value="$${date:yyyy-MM-dd HH:mm:ss.SSS}"/>
            </JsonLayout>
        </RollingFile>

        <Async name="ASYNJsonAppender" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="JsonFile"/>
        </Async>


        <Async name="ASYNCSTDOUT" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="STDOUT" />
        </Async>

        <Async name="ASYNCerrorAppender" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="errorAppender" />
        </Async>

        <Async name="ASYNCwarnAppender" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="warnAppender" />
        </Async>

        <Async name="ASYNCinfoAppender" bufferSize="512">
            <!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
            <!--            <AsyncQueueFullPolicy>Discard</AsyncQueueFullPolicy>-->
            <!--            <discardingThreshold>0</discardingThreshold>-->
            <AppenderRef ref="infoAppender" />
        </Async>
    </Appenders>

    <loggers>
        <logger name="org.apache.hadoop.hbase.util.DynamicClassLoader" level="ERROR"/>
        <!--	<logger name="com.netflix" level="INFO"/>-->
        <!--	<logger name="cn.com.bsfit.frms.engine" level="INFO"/>-->
        <!--	<logger name="cn.com.bsfit.frms.pay.engine.loader.mob" level="INFO"/>	-->
        <!-- 根，所有logger的祖先 -->
        <root level="INFO">
            <AppenderRef ref="WebConsoleAppender" />
            <AppenderRef  ref="ASYNCSTDOUT" />
            <AppenderRef  ref="ASYNCerrorAppender" />
            <AppenderRef  ref="ASYNCwarnAppender" />
            <AppenderRef  ref="ASYNCinfoAppender" />
            <AppenderRef ref="ASYNJsonAppender"/>
        </root>
    </loggers>
</configuration>